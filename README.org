#+title: Emacs Config
#+author: Leandrus Fanzec
#+startup: overview
#+SETUPFILE: ~/.emacs.d/latex.setup

* üöÄ Presentaci√≥n

[[file:captura.png]]


Esta es una configuraci√≥n que busca ser b√°sica, pero a la vez c√≥moda que he podido probar con √©xito en la versi√≥n 29 de Emacs, y en las distribuciones Ubuntu, Fedora, Gentoo, Openbsd, Arch.

Cabe se√±alar que, esta configuraci√≥n est√° pensada para aquellos que busquen una aproximaci√≥n m√°s /"amigable"/ a este programa y para un uso b√°sico de documentos.

En este sentido, la configuraci√≥n est√° principalmente girada hacia el uso de org-mode y su capacidad de exportar a diferentes tipos de formatos.

‚ö† No se olvide de instalar las [[‚ö† Dependencias][dependencias]] para esta configuraci√≥n.

* ü§∑ ¬øPor qu√© utilizar esta configuraci√≥n?

[[file:config.png]]

Una de las primeras dudas que pudiese aparecer al usuario es la pregunta respecto a ¬øpara qu√© utilizarla? ¬øacaso el programa necesariamente necesita esa configuraci√≥n? y en definitiva: ¬øPor qu√© √©sta y no otra?

1. Creo que esta es una buena configuraci√≥n para una persona que viene
   aproxim√°ndose a Emacs, principalmente en esta parte del mundo en la
   que se habla espa√±ol y la b√∫squeda de informaci√≥n se hace dif√≠cil.

2. En segundo lugar, porque no se atreve a cambiar su funcionamiento normal, como es el caso de Doomemacs o Vimspace, las cuales ya son muy conocidas y tambi√©n utilizadas masivamente pero que, (seg√∫n mi opini√≥n), sobresaturan las funciones normales del programa.

3. En cambio, esta configuraci√≥n tal como podemos observar de la lectura de la secci√≥n [[Packages][Packages]], son apenas los siguientes:

   + [[https://github.com/minad/vertico][vertico]]
   + [[https://github.com/rnkn/olivetti][olivetti]]
   + [[https://github.com/oantolin/orderless][orderless]]
   + [[https://github.com/company-mode/company-mode][company]]
   + [[https://github.com/minad/org-modern][org-modern]]
   + [[https://github.com/protesilaos/fontaine][fontaine]]
   + [[https://github.com/protesilaos/pulsar][pulsar]]
   + [[https://github.com/vedang/pdf-tools][pdf-tools]]
   + [[https://github.com/protesilaos/ef-themes][ef-themes]]
   + [[https://www.gnu.org/software/auctex/][auctex]]
   + [[https://github.com/protesilaos/denote][denote]]

4. Es una buena manera de aprender conocer el sistema tal como es, porque de esta manera es m√°s f√°cil de buscar informaci√≥n. Con esto quiero decir que, la informaci√≥n siempre es m√°s abundante con programas estandarizados, por el mero hecho de que ese aspecto lo hace m√°s com√∫n.

** üì∞ Template Latex

Como se puede observar en la secci√≥n [[Latex][Latex]], he tomado la template que provee Jake B en un v√≠deo que se cita m√°s abajo.

Para poder utilizar ese archivo de configuraci√≥n como ah√≠ se se√±ala, se debe tener un archivo de setup que tambi√©n est√° en este repositorio, que, _es de completa autor√≠a de Jake B_, yo solamente modifique algunas cosas para espa√±ol conforme a mis necesidades.

Dicho archivo, debe ser invocado al inicio de un documento tipo org, de la siguiente manera:

: #+SETUPFILE: ~/.emacs.d/latex.setup

Se puede tomar de ejemplo este mismo documento de configuraci√≥n, el cual ya viene con ese ajuste y que m√°s adelante podremos ver como funciona.

Se debe reparar que la ruta que ah√≠ se indica es la de configuraci√≥n de Emacs, a la cual, anteriormente se hab√≠an traspasado los archivos del repositorio, dentro de estos archivos iba tambi√©n el que invoca ahora denominado "latex.setup".

Para hacerlo aun m√°s did√°ctico este mismo archivo ya se encuentra con esa configuraci√≥n (al principio del archivo), y si quieres probar c√≥mo funciona basta con seguir los siguientes pasos:

1) Abra Emacs (como se se√±ala m√°s arriba);
2) Busque el archivo configuraci√≥n README.org utilizando: C-x C-f y
   buscando la siguiente ruta: ~/.emacs.d/README.org.
3) Abra el archivo;
4) Presione "C-c e", aparecer√° un menu de exportaci√≥n;
5) Presione la tecla "l" (latex) y luego "o" (generar pdf y abrir;
6) Puedes acompa√±ar el proceso en los avisos que aparece en el
   mini-buffer.
   
* üíª Instalaci√≥n

Para realizar la instalaci√≥n se debiera copiar este repositorio dentro de la misma carpeta de Emacs para ejecutarlo al inicio del programa:

: git clone https://github.com/leandrusfanzec/emacs-leandrus.git

: cd emacs-leandrus/

: cp * ~/.emacs.d/

_Aviso_: Lo que se est√° haciendo en el √∫ltimo comando es copiar los archivos del repositorio a la carpeta de configuraciones de Emacs. Esta carpeta solamente se crea cuando *se haya abierto alguna vez el programa*, por lo que si nosotros simplemente instalamos Emacs y luego copiamos dichos documentos nos saldr√° un error se√±alando que dicho destino (/la carpeta de configuraci√≥n ".emacs.d"/), no existe. Nada impide, por otro lado, que lo hagamos nosotros mismos con el comando /mkdir/ (en tal caso, lo har√≠amos con: /"mkdir $HOME/.emacs.d"/).

*** ‚ö† Dependencias

Para el correcto funcionamiento de la funci√≥n anteriormente descrita debemos tener instalados los siguientes paquetes:

- Texlive ::
- Texlive-Lua ::
- Texlive-bibtex ::
- Aspell-es ::
- pdf-tool-install :: Despu√©s de iniciar por primera vez el programa, se recomienda ejecutar ese comando para instalar pdf-tool-install (M-x pdf-tool-install).
- Iosevka e [[https://github.com/protesilaos/iosevka-comfy][Iosevka-Confy]] :: Se utiliza esta fuente en esta configuraci√≥n, todas las distribuciones en general tienen en su repositorio el primero, el segundo se debe descargar del repositorio y enviarlo a "/usr/share/fonts".

Los tres primeros son paquetes de Latex, que nos permitir√° hacer uso
de las funciones de exportaci√≥n a pdf.

El tercero, nos permitir√° hacer uso de la funci√≥n de spell checker (el cual, conforme a esta configuraci√≥n deber√° iniciar el modo "fly-spell" al abrir cualquier documento org.

Pdf-tool, es un paquete de lector de pdf m√°s optimizado que el docview que utiliza Emacs por defecto. Vale la pena probarlo!

Iosevka es una tipograf√≠a, actualmente me parece muy bien, pero s√© que es una cuesti√≥n de gustos. 

*** Issues

Hay un problema que aun no he podido solucionar que consiste en el color del frame cuando se divide en 2 horizontales.

Si alguien sabe como arreglar eso, ser√° bienvenida su ayuda.

[[file:issue.png]]

* üí° Consejos para Uso
** Daemon y Cliente

Para un mejor en general, se recomienda iniciar el programa Emacs como daemon y luego simplemente invocar los clientes. Lo que en l√≠nea de comando es algo as√≠, dependiendo de la distribuci√≥n:

- /ejemplo gen√©rico:/

: emacs --daemon

En este momento cargar√° la configuraci√≥n, los repositorios y paquetes. Al final debiese aparecer un aviso diciendo que el demonio ha iniciado.

Y luego:

: emacsclient -c

Esto puede variar dependiendo del SO, pero en general esta es la idea: daemon + client.

** Manual de Referencia

Se recomienda familiarizarse con los manuales de los paquetes y de Emacs mismo, para eso podemos utilizar el atajo: /"C-h i"/.

** Atajos de teclado

En la [[Key Maps][√∫ltima secci√≥n]] se definen algunos atajos, no son muchos y se recomienda su lectura.

* Comportamiento General

En esta primera etapa la configuraci√≥n realiza peque√±os ajustes para que la interfaz sea un poco m√°s minimalista, elimina el aviso sonoro y visual, mejora el movimiento de scroll y agrega una funci√≥n de "unfill" que personalmente me pareci√≥ muy √∫til.

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  ;; Easy-Kill de buffer whitout modifications
  (global-set-key [(control x) (k)] 'kill-this-buffer)
  
  ;; Puedes incluir el nombre usuario entre las colmillas:
  (setq user-full-name "")

  ;; Unfill Function
  ;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))

  ;; Add frame borders and window dividers
  (modify-all-frames-parameters
   '((right-divider-width . 30)
     (internal-border-width . 30)))

  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "‚Ä¶"

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?‚îÄ
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ " "‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ")
   org-agenda-current-time-string
   "‚≠† now ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")


#+end_src

* Repositorios

Aqu√≠ se configura los repositorios elpa y melpa, creo que con estos dos los usuarios podr√°s encontrar la mayor√≠a de los paquetes que busquen, configurando a la vez "use-package" que es muy √∫til para configurar dichos paquetes.

Esto es enteramente sacado de System Crafters y su saga EFS.

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Packages

En esta secci√≥n se instalan y configuran los paquetes que ser√°n instalados a trav√©s de usa-packages.

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode))

  (use-package olivetti)

  (use-package tex
    :ensure auctex)

  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)

  (use-package org-modern)
  (global-org-modern-mode)

  ;; Choose some fonts
  (set-face-attribute 'default nil :family "Iosevka")
  (set-face-attribute 'variable-pitch nil :family "Iosevka Aile")
  (set-face-attribute 'org-modern-symbol nil :family "Iosevka")

  (use-package fontaine)
  ;; Fontaine
  (setq fontaine-presets
        '((tiny
           :default-family "Iosevka Comfy Wide Fixed"
           :default-height 70)
          (small
           :default-family "Iosevka Comfy Fixed"
           :default-height 90)
          (regular
           :default-height 100)
          (medium
           :default-height 110)
          (large
           :default-weight semilight
           :default-height 140
           :bold-weight extrabold)
          (presentation
           :default-weight semilight
           :default-height 170
           :bold-weight extrabold)
          (t
           ;; I keep all properties for didactic purposes, but most can be
           ;; omitted.  See the fontaine manual for the technicalities:
           ;; <https://protesilaos.com/emacs/fontaine>.
           :default-family "Iosevka Comfy"
           :default-weight regular
           :default-height 100
           :fixed-pitch-family nil ; falls back to :default-family
           :fixed-pitch-weight nil ; falls back to :default-weight
           :fixed-pitch-height 1.0
           :variable-pitch-family "Iosevka Comfy Duo"
           :variable-pitch-weight nil
           :variable-pitch-height 1.0
           :bold-family nil ; use whatever the underlying face has
           :bold-weight bold
           :italic-family nil
           :italic-slant italic
           :line-spacing nil)))

  (fontaine-set-preset 'regular)

  ;; Line numbers 
  (defun my-display-numbers-hook ()
    (display-line-numbers-mode 1)
    )
  (add-hook 'prog-mode-hook 'my-display-numbers-hook)

  (use-package pulsar)
  (require 'pulsar)

  (setq pulsar-pulse t)
  (setq pulsar-delay 0.055)
  (setq pulsar-iterations 10)
  (setq pulsar-face 'pulsar-red)
  (setq pulsar-highlight-face 'pulsar-yellow)

  (use-package pdf-tools)
  
  (pulsar-global-mode 1)
#+end_src

* Dired

Esto es un peque√±o ajuste para que no aparezcan todos los archivos ocultos en Dired, haci√©ndolo un poco m√°s simple.

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'denote-dired-mode)
#+end_src

* Theme

#+begin_src emacs-lisp
  ;; Make customisations that affect Emacs faces BEFORE loading a theme
  ;; (any change needs a theme re-load to take effect).
  (use-package ef-themes)
  (require 'ef-themes)

  ;; If you like two specific themes and want to switch between them, you
  ;; can specify them in `ef-themes-to-toggle' and then invoke the command
  ;; `ef-themes-toggle'.  All the themes are included in the variable
  ;; `ef-themes-collection'.
  (setq ef-themes-to-toggle '(ef-melissa-light ef-melissa-dark))

  (setq ef-themes-headings ; read the manual's entry or the doc string
	'((0 variable-pitch light 1.9)
	  (1 variable-pitch light 1.8)
	  (2 variable-pitch regular 1.7)
	  (3 variable-pitch regular 1.6)
	  (4 variable-pitch regular 1.5)
	  (5 variable-pitch 1.4) ; absence of weight means `bold'
	  (6 variable-pitch 1.3)
	  (7 variable-pitch 1.2)
	  (t variable-pitch 1.1)))

  ;; They are nil by default...
  (setq ef-themes-mixed-fonts t
	ef-themes-variable-pitch-ui t)

  ;; Read the doc string or manual for this one.  The symbols can be
  ;; combined in any order.
  (setq ef-themes-region '(intense no-extend neutral))

  ;; Disable all other themes to avoid awkward blending:
  (mapc #'disable-theme custom-enabled-themes)

  ;; OR use this to load the theme which also calls `ef-themes-post-load-hook':
  (ef-themes-select 'ef-melissa-light)
#+end_src

* Denote

Configuraci√≥n de la herramienta de gesti√≥n de notas. Otra m√°s del gran Prot.

#+BEGIN_SRC emacs-lisp
  (use-package denote)
  (require 'denote)

  ;; Remember to check the doc strings of those variables.
  (setq denote-directory (expand-file-name "~/Public/docs/notes/"))
  (setq denote-known-keywords '("emacs" "philosophy" "politics" "economics" "derecho"))
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)
  (setq denote-file-type nil) ; Org is the default, set others here
  (setq denote-prompts '(title keywords))
  (setq denote-excluded-directories-regexp nil)
  (setq denote-excluded-keywords-regexp nil)

  ;; Pick dates, where relevant, with Org's advanced interface:
  (setq denote-date-prompt-use-org-read-date t)

  ;; We do not allow multi-word keywords by default.  The author's
  ;; personal preference is for single-word keywords for a more rigid
  ;; workflow.
  (setq denote-allow-multi-word-keywords t)

  (setq denote-date-format nil) ; read doc string

  ;; By default, we do not show the context of links.  We just display
  ;; file names.  This provides a more informative view.
  (setq denote-backlinks-show-context t)

  ;; If you use Markdown or plain text files (Org renders links as buttons
  ;; right away)
  (add-hook 'find-file-hook #'denote-link-buttonize-buffer)

  ;; Register Denote's Org dynamic blocks
  (require 'denote-org-dblock)

  (require 'savehist)
  (setq savehist-file (locate-user-emacs-file "savehist"))
  (setq history-length 500)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history t)
  (add-hook 'after-init-hook #'savehist-mode)

  (defun my-denote-journal ()
    "Create an entry tagged 'journal' with the date as its title.
       If a journal for the current day exists, visit it.  If multiple
       entries exist, prompt with completion for a choice between them.
       Else create a new file."
    (interactive)
    (let* ((today (format-time-string "%A %e %B %Y"))
	   (string (denote-sluggify today))
	   (files (denote-directory-files-matching-regexp string)))
      (cond
       ((> (length files) 1)
	(find-file (completing-read "Select file: " files nil :require-match)))
       (files
	(find-file (car files)))
       (t
	(denote
	 today
	 '("journal"))))))

  (setq denote-templates
	`((document . "#+LaTeX_CLASS: article\n#+LaTeX_CLASS_OPTIONS: [letterpaper]\n#+SETUPFILE: ~/.emacs.d/latex.setup\n#+bibliography: ~/Public/docs/recursos/bib.bib\n#+OPTIONS: toc:nil\n\n---------------------------------------------------------------------------------------------------\n\n")))
#+END_SRC

* Org

Estas son algunas configuraciones para el uso general de los archivos en org.  Como por ejemplo el spell-check, sangr√≠a, modifica el s√≠mbolo de folded de los headlines.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-flyspell)
  (add-hook 'org-mode-hook 'olivetti-mode)
  (setq org-startup-indented t
        org-pretty-entities t
        org-adapt-indentation t
        org-odd-levels-only t
        org-hide-leading-stars t
        org-image-actual-width '(300))
#+end_src

* Org-Agenda

Estas son configuraciones para traducir el calendario y agenda que en alg√∫n momento los encontr√© por internet y me pareci√≥ perfecto.

#+begin_src emacs-lisp
  ;; Calendar
  (setq calendar-date-style 'iso)
  (setq calendar-week-start-day 1)
  (setq calendar-day-header-array ["Do" "Lu" "Ma" "Mi" "Ju" "Vi" "S√°"])
  (setq calendar-day-name-array ["domingo" "lunes" "martes" "mi√©rcoles" "jueves" "viernes" "s√°bado"])
  (setq calendar-month-abbrev-array ["Ene" "Feb" "Mar" "Abr" "May" "Jun" "Jul" "Ago" "Sep" "Oct" "Nov" "Dic"])
  (setq calendar-month-name-array ["enero" "febrero" "marzo" "abril" "mayo" "junio" "julio" "agosto" "septiembre" "octubre" "noviembre" "diciembre"])
#+end_src

* Latex

Esto es algo tomado de [[https://www.youtube.com/@JakeBox0][Jake B]] por lo que recomiendo ver su v√≠deo que dejar√© [[https://jakebox.github.io/youtube/org_latex_video.html][aqu√≠]].

#+begin_src emacs-lisp
  (setq org-latex-with-hyperref nil)

  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
               [NO-DEFAULT-PACKAGES]
               [PACKAGES]
               [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  ;; Cargar AUCTeX
  (use-package tex
    :ensure auctex)

  ;; Configuraci√≥n adicional para AUCTeX
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (setq TeX-PDF-mode t) ; Usar el modo PDF por defecto

  ;; Activa el modo de AUCTeX en archivos .tex
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)

  ;; Configuraci√≥n para utilizar minted con AUCTeX
  (setq LaTeX-command "latex -shell-escape")

  ;; Activa el relleno autom√°tico de par√©ntesis
  (electric-pair-mode 1)

  ;; Activa el resaltado de par√©ntesis correspondientes
  (show-paren-mode 1)
#+end_src

* Key Maps

Por √∫ltimo, estableceremos los atajos de teclado para que alguna de las funciones m√°s utilizadas est√©n "m√°s a la mano" a la hora de trabajar.

#+begin_src emacs-lisp
  ;; Org
  (global-set-key (kbd "C-c c") #'org-capture)
  (global-set-key (kbd "C-c a") #'org-agenda)
  ;; Compara modificaciones en el buffer
  (global-set-key (kbd "C-x v =") #'diff-buffer-with-file)
  ;; Utilities
  (global-set-key (kbd "C-x c") 'calendar)
  ;; Comportamiento imenu
  (global-set-key (kbd "M-i") 'imenu)
  ;; Unfill
  (define-key global-map "\M-Q" 'unfill-paragraph)
  ;; Toggle theme 
  (define-key global-map (kbd "<f5>") 'ef-themes-toggle)
  ;; Denote
  (let ((map global-map))
    (define-key map (kbd "C-c n j") #'my-denote-journal) ; our custom command
    (define-key map (kbd "C-c n n") #'denote)
    (define-key map (kbd "C-c n N") #'denote-type)
    (define-key map (kbd "C-c n d") #'denote-date)
    (define-key map (kbd "C-c n z") #'denote-signature) ; "zettelkasten" mnemonic
    (define-key map (kbd "C-c n s") #'denote-subdirectory)
    (define-key map (kbd "C-c n t") #'denote-template)
    ;; If you intend to use Denote with a variety of file types, it is
    ;; easier to bind the link-related commands to the `global-map', as
    ;; shown here.  Otherwise follow the same pattern for `org-mode-map',
    ;; `markdown-mode-map', and/or `text-mode-map'.
    (define-key map (kbd "C-c n i") #'denote-link) ; "insert" mnemonic
    (define-key map (kbd "C-c n I") #'denote-add-links)
    (define-key map (kbd "C-c n b") #'denote-backlinks)
    (define-key map (kbd "C-c n f f") #'denote-find-link)
    (define-key map (kbd "C-c n f b") #'denote-find-backlink)
    ;; Note that `denote-rename-file' can work from any context, not just
    ;; Dired bufffers.  That is why we bind it here to the `global-map'.
    (define-key map (kbd "C-c n r") #'denote-rename-file)
    (define-key map (kbd "C-c n R") #'denote-rename-file-using-front-matter))

  ;; Key bindings specifically for Dired.
  (let ((map dired-mode-map))
    (define-key map (kbd "C-c C-d C-i") #'denote-link-dired-marked-notes)
    (define-key map (kbd "C-c C-d C-r") #'denote-dired-rename-marked-files)
    (define-key map (kbd "C-c C-d C-R") #'denote-dired-rename-marked-files-using-front-matter))

  (with-eval-after-load 'org-capture
    (setq denote-org-capture-specifiers "%l\n%i\n%?")
    (add-to-list 'org-capture-templates
                 '("n" "New note (with denote.el)" plain
                   (file denote-last-path)
                   #'denote-org-capture
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t)))
  ;; Pulsar
  (let ((map global-map))
    (define-key map (kbd "C-c h p") #'pulsar-pulse-line)
    (define-key map (kbd "C-c h h") #'pulsar-highlight-line))
#+end_src
