#+title: Emacs Config
#+author: Leandrus Fanzec
#+startup: overview
#+SETUPFILE: ~/.emacs.d/latex.setup

[[file:wellcome.png]]

Esta es una configuración muy básica pero a la vez cómoda que la he probado con
éxito en la versión 28 y 27 de Emacs, y en las distribuciones de Ubuntu, Fedora y
Gentoo.

En definitiva se trata de la configuración básica y minimalista que yo
personalmente siempre he tratado de mantener, pero estimo sinceramente que,
puede ser de utilidad a los usuarios que deseen conocer por primera vez el
poder Emacs.

* ¿Por qué utilizar esta configuración?

Una de las primeras dudas que pudiese aparecer al usuario es la pregunta
respecto a ¿para qué utilizarla? ¿acaso el programa necesariamente necesita esa
configuración? y en definitiva: ¿Por qué ésta y no otra?

En síntesis, creo que esta es una buena configuración para una persona que viene
aproximándose a Emacs, principalmente en esta parte del mundo que se habla
español.

Primero porque no se atreve mucho a cambiar su funcionamiento normal, como es
el caso de Doomemacs o Vimspace, las cuales ya son muy conocidas y también utilizadas masivamente pero que sobresaturan las funciones normales del programa.

En este sentido, tal como podemos observar con la lectura de la sección
"Packages" son apenas algunos aquellos que se instalan:

- vertico
- orderless
- olivetti
- consult
- modus-themes

Como se puede notar, esta configuración no se encuentra rellenada paquetes
accesorios y creo que con esto cualquier usuario que quisiera conocer
este programa le facilitaría el proceso dado que no se distorsiona su idea
principal. Por lo menos desde un punto de vista personal, fue lo que busqué al
iniciarme en Emacs.

Cabe señalar que, esto que se ve aquí consiste en la misma configuración del
programa el cual se ejecutará al iniciar el programa. Es un archivo en formato
org que invoca ordenes de elisp con la cual funciona el programa.

* Instalación

Para realizar la instalación se debiera copiar este repositorio dentro de la
misma carpeta de Emacs para ejecutarlo al inicio del programa:

> git clone https://github.com/leandrusfanzec/emacs-leandrus.git

> cd emacs-leandrus/

> cp * ~/.emacs.d/

He decidido hacerlo de esta manera porque es más rápido y además contiene
también el template de latex que será de gran ayuda para usuario.

* Consejos para Uso

Para un mejor uso de esta configuración, recomendaría al usuario iniciar el
programa Emacs como daemon y luego simplemente invocar los clientes. Lo que en
línea de comando es algo así, dependiendo de la distribución:

> emacs --daemon

> emacsclient -c

Esto puede variar, pero en general esta es la idea: daemon + client.
Al hacer este último comando debiese aparecer nuestro primer buffer del programa:

[[file:primerbuffer.png]]

En segundo lugar, por algún motivo la compilación de olivetti aparecen algunos
avisos en el buffer "Compile.log" los cuales no he podido resolver, pero que no
son impedimento para el normal funcionamiento normal de esta configuración.
Pero si les aparece, solamente será la primera vez (cuando se compile), pero no
volverá a aparecer (al menos por ese motivo obviamente).

Respecto del tema seleccionado, modus-operandi-tinted, se trata de una
variación del paquete modus-theme que personalmente me gusta, sin embargo se
puede cambiar facilmente presionando M-x, con el comando:

> modus-themes-select

Que, en su variante dark también me gusta mucho (modus-vivendi-tinted).
Recomiendo el uso de estos temas por su facilidad y flexibilidad para
configurar.

Por último, siempre, siempre recurra al manual con "C-h i". Es una enorme
fuente de información importante.

* Template Latex

Como se puede observar en la sección "Latex" he tomado la template que da como
ejemplo Jake B en un vídeo que se cita más abajo. Para poder utilizar ese
archivo de configuración como ahí se señala, se debe tener un archivo de setup
que también está en este repositorio, que, es de completa autoría de Jake B
pero lo dejo aquí para mayor facilidad al momento de utilizar estas
herramientas.

básicamente al inicio del archivo org se debe establecer lo siguiente:

> #+SETUPFILE: ~/.emacs.d/latex.setup

Esto siguiendo las instrucciones de instalación señalados un poco más arriba,
dado que la dirección tiene que apuntar específicamente a ese archivo, el cual
puede ser modificado despues por el usuario.

Para hacerlo aun más didáctico este mismo archivo ya se encuentra con esa configuración y si quieres probar como funciona basta con presionar C-c e, y luego: l (Latex), o (generar archivo pdf y abrirlo), dentro del archivo README.org copiado a la carpeta de Emacs.

Lo puedes hacer abriendo Emacs, luego buscando el archivo con C-x C-f en el directorio ~/.emacs.d/README.org.

[[file:convertir.png]]

Recuerde que latex debe estar instalado con sus paquetes extras.

* Comportamiento General

En esta primera etapa la configuración realiza pequeños ajustes para que la
interfaz sea un poco más minimalista, elimina el aviso sonoro y visual, mejora
el movimiento de scroll y agrega una función de "unfill" que personalmente me
pareció muy útil.

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (global-set-key [(control x) (k)] 'kill-this-buffer)
  (setq search-whitespace-regexp ".*")
  (setq isearch-lax-whitespace t)
  (setq isearch-regexp-lax-whitespace nil)
  (setq initial-scratch-message "\n;; Bienvenido a Emacs, esto es un buffer de scratch!\n\n\n")
  (setq user-full-name "NOMBREUSUARIO")

  ;; === Smooth scroll ==
  (setq redisplay-dont-pause t
        scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)

  ;; Unfill Function
  ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))
#+end_src

* Repositorios

Aquí se configura los repositorios elpa y melpa, creo que con estos dos los
usuarios podrás encontrar la mayoría de los paquetes que busquen, configurando
a la vez "use-package" que es muy útil para configurar dichos paquetes.

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Packages

En esta sección se instalan y configuran los paquetes que serán instalados a
través de usa-packages.

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Distraction-free screen
  ;; Por defecto inicia en los archivos org pero también con f9
  (use-package olivetti
    :hook (org-mode . olivetti-mode)
    :bind
    (("<f9>" . olivetti-mode)))

  (use-package modus-themes)
#+end_src

* Theme

Estas son algunas configuraciones respecto del paquete modus-theme que ya viene
por defecto instalada en la versión 28 de Emacs, pero que he decidido dejarlo
instalado por una de las variantes que solamente se encuentran actualmente en
el paquete que se instala desde los repositorios configurados anteriormente.

Esas configuraciones se encuentran en el mismo manual del paquete y que pueden
ser accedidos a través de las teclas "C-h i", y está muy bien documentado por
su creado [[https://protesilaos.com/][Protesilaos]] (also knows as Prot).

#+begin_src emacs-lisp
  ;; Customization
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-no-mixed-fonts nil
        modus-themes-subtle-line-numbers nil
        modus-themes-success-deuteranopia t
        modus-themes-tabs-accented t
        modus-themes-inhibit-reload t ; only applies to `customize-set-variable' and related

        modus-themes-fringes 'nil ; {nil,'subtle,'intense}

        ;; Options for `modus-themes-lang-checkers' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `straight-underline', `text-also', `background',
        ;; `intense'
        modus-themes-lang-checkers `(straight-underline text-also background intense)

        ;; Options for `modus-themes-mode-line' are either nil, or a list
        ;; that can combine any of `3d' OR `moody', `borderless',
        ;; `accented', `padded'.
        modus-themes-mode-line '(accented borderless)

        ;; Options for `modus-themes-syntax' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `faint', `yellow-comments', `green-strings', `alt-syntax'
        modus-themes-syntax `(alt-syntax yellow-comments)

        ;; Options for `modus-themes-hl-line' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `accented', `underline', `intense'
        modus-themes-hl-line '(underline accented)

        ;; Options for `modus-themes-paren-match' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `bold', `intense', `underline'
        modus-themes-paren-match '(intense)

        ;; Options for `modus-themes-links' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
        ;; `bold', `italic', `background'
        modus-themes-links '(background faint)

        ;; Options for `modus-themes-prompts' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `background', `bold', `gray', `intense', `italic'
        modus-themes-prompts '(intense bold)

        modus-themes-mail-citations nil ; {nil,'faint,'monochrome}

        ;; Options for `modus-themes-region' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `no-extend', `bg-only', `accented'
        modus-themes-region '(bg-only no-extend)

        ;; Options for `modus-themes-diffs': nil, 'desaturated,
        ;; 'bg-only, 'deuteranopia, 'fg-only-deuteranopia
        modus-themes-diffs 'fg-only-deuteranopia

        modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

        modus-themes-org-agenda ; this is an alist: read the manual or its doc string
        '((header-block . (variable-pitch scale-title))
          (header-date . (grayscale workaholic bold-today))
          (event . (accented scale-small))
          (scheduled . uniform)
          (habit . traffic-light-deuteranopia))

        modus-themes-headings ; this is an alist: read the manual or its doc string
        '((1 . (overline background))
          (2 . (rainbow overline))
          (t . (no-bold)))

        modus-themes-variable-pitch-ui nil
        modus-themes-variable-pitch-headings t
        modus-themes-scale-headings t
        modus-themes-scale-1 1.1
        modus-themes-scale-2 1.15
        modus-themes-scale-3 1.21
        modus-themes-scale-4 1.72
        modus-themes-scale-title 1.33)

  (load-theme 'modus-operandi-tinted t)            ; Light theme
#+end_src

* Dired

Esto es un pequeño ajuste para que no aparezcan todos los archivos ocultos en
Dired, haciéndolo un poco más simple.

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src

* Org

Estas son algunas configuraciones para el uso general de los archivos en org.
Como por ejemplo el spell-check, sangría, oculta los símbolos de formato de
texto, abre las imágenes automáticamente al abrir los archivos, modifica el
símbolo de folded de los headlines.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-flyspell)
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-leading-stars t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300))
  (setq org-ellipsis " ▼ ")
#+end_src

* Org-Agenda

Estas son configuraciones para traducir el calendario y agenda que en algún
momento los encontré por internet y me pareció perfecto.

#+begin_src emacs-lisp
  ;; Calendar
  (setq calendar-date-style 'iso)
  (setq calendar-week-start-day 1)
  (setq calendar-day-header-array ["Do" "Lu" "Ma" "Mi" "Ju" "Vi" "Sá"])
  (setq calendar-day-name-array ["domingo" "lunes" "martes" "miércoles" "jueves" "viernes" "sábado"])
  (setq calendar-month-abbrev-array ["Ene" "Feb" "Mar" "Abr" "May" "Jun" "Jul" "Ago" "Sep" "Oct" "Nov" "Dic"])
  (setq calendar-month-name-array ["enero" "febrero" "marzo" "abril" "mayo" "junio" "julio" "agosto" "septiembre" "octubre" "noviembre" "diciembre"])
  ;; Agenda
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)


  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
  (setq org-clock-history-length 23)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t)

  (setq org-return-follows-link t)
#+end_src

* Latex

Esto es algo tomado de [[https://www.youtube.com/@JakeBox0][Jake B]] por lo que recomiendo ver su vídeo que
dejaré [[https://jakebox.github.io/youtube/org_latex_video.html][aquí]].

#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

* Key Maps

Por último, estableceremos los atajos de teclado para que alguna de las
funciones más utilizadas estén "más a la mano" a la hora de trabajar.

#+begin_src emacs-lisp
  ;; Org
  (global-set-key (kbd "C-c c") #'org-capture)
  (global-set-key (kbd "C-c a") #'org-agenda)
  ;; Compara modificaciones en el buffer
  (global-set-key (kbd "C-x v =") #'diff-buffer-with-file)
  ;; Utilities
  (global-set-key (kbd "C-x c") 'calendar)
  ;; Comportamiento imenu
  (global-set-key (kbd "M-i") 'imenu)
  ;; Unfill
  (define-key global-map "\M-Q" 'unfill-paragraph)
#+end_src
